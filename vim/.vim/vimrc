" SPDX-FileCopyrightText: 2019 Hristo Filaretov <h.filaretov@campus.tu-berlin.de>
" SPDX-License-Identifier: MIT

" Basic Settings {{{

" Run Pathogen 
execute pathogen#infect() 

set nocompatible

filetype plugin indent on " use filetype settings
syntax enable " syntax highlighting

set ignorecase	" ignores case when searching
set smartcase	" case-sensitive when using capital in search
set number		" show linenumber 
set history=50	" keep 50 lines of command line history
set showcmd		" display incomplete commands
set incsearch	" do incremental searching

colorscheme 
" Set colour scheme
" color jellybeans
color badwolf
"color inkpot

" Tab settings
set tabstop=4
set shiftwidth=4
set softtabstop=4

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Set directories for swap and undo files
set directory=~/.vim/tmp/swap//
set undodir=~/.vim/tmp/undo//

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
	au!
	" When editing a file, always jump to the last known cursor position.
	" Don't do it when the position is invalid or when inside an event handler
	" (happens when dropping a file on gvim).
	autocmd BufReadPost *
				\ if line("'\"") >= 1 && line("'\"") <= line("$") |
				\   exe "normal! g`\"" |
				\ endif
augroup END

if has('langmap') && exists('+langnoremap')
	" Prevent that the langmap option applies to characters that result from a
	" mapping.  If unset (default), this may break plugins (but it's backward
	" compatible).
	set langnoremap
endif
" }}}

" Status Line {{{
set noruler				" hide ruler to always use glorious statusline
set laststatus=2		" always show statusline
set statusline=			" clear statusline
set statusline+=%.30F	" Filepath
set statusline+=\ \ %y	" filetype
set statusline+=%=		" Align right
set statusline+=%l/%3L	" line in file
" }}}

" Mappings {{{

"set leader key to:
let mapleader = ","
let maplocaleader = "\\"

" Completion options
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Smart tab
function! CleverTab()
	if pumvisible()
		return "\<Down>"
	endif
	if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
		return "\<Tab>"
	else
		return "\<C-N>"
	endif
endfunction
inoremap <Tab> <C-R>=CleverTab()<CR>

" Turn off highlighting
nnoremap <leader>h :noh<cr>
" Strong left
nnoremap H ^
" Strong right
nnoremap L $
" }}}

" Command and Functions {{{
" For using in command macros
" Silences command and redraws screen
command! -nargs=1 Silent
			\ | execute ':silent !'.<q-args>
			\ | execute ':redraw!'
"
" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
	command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
				\ | wincmd p | diffthis
endif
" }}}

" Vimscript FileType Settings {{{
augroup filetype_vim
	autocmd!
	autocmd FileType vim setlocal foldmethod=marker
	autocmd FileType vim setlocal foldlevelstart=0 " have all folds closed
augroup END
" }}}

" Text FileType Settings {{{ augroup filetype_txt
augroup filetype_text
	autocmd!
	" For all text files set 'textwidth' to 78 characters.
	autocmd FileType text setlocal textwidth=78
augroup END
" }}}

"Include md as markdown file extension{{{
augroup md_extensions
	autocmd!
	autocmd BufNewFile,BufRead *.md set filetype=markdown
augroup END
"}}}
