#+TITLE: Emacs Configuration
#+AUTHOR: Hristo Filaretov
#+EMAIL: h.filaretov@protonmail.com
#+OPTIONS: toc:nil num:nil

* Preamble
  
Literate programming sounds like a good thing for dotfile configuration, since
it rarely changes and on rare occasions I might want to know why I did what I
did. Also, it looks really nice.

Credit to [[https://harryrschwartz.com/][Harry Schwartz]] for the inspiration and for allowing others, like
myself, to shamelessly steal ideas and code (see [[https://www.youtube.com/watch?v=SzA2YODtgK4][Getting Started with
Org-mode]]). His articles and talks are all great!

* Meta

#+BEGIN_QUOTE
You see, yak shaving is what you are doing when you're doing some
stupid, fiddly little task that bears no obvious relationship to what
you're supposed to be working on, but yet a chain of twelve causal
relations links what you're doing to the original meta-task. -- Jeremy H. Brown
#+END_QUOTE

** Customize options

Keep settings set by =customize= out of =init.el=.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC

** Quickly edit =configuration.org= and load settings

I had an old function which simply loads the init file if I'm already in it,
otherwise it finds it, but now that I'm using this literate programming
thingamajig, I need to find the =org= file, but load the =init.el= file.

#+BEGIN_SRC emacs-lisp
  (setq my-init-file "~/.emacs.d/configuration.org")

  (defun hgf/edit-or-load-user-init-file ()
    "Find the custom user init file if it's not the current buffer, otherwise load the proper one."
    (interactive)
    (if (string-equal (buffer-file-name) (file-truename my-init-file))
        (load-file user-init-file)
      (find-file my-init-file)))

  (global-set-key (kbd "C-c e") 'hgf/edit-or-load-user-init-file)
#+END_SRC

* Configure =use-package=

These will one day be sorted. Probably. Maybe.

#+BEGIN_SRC emacs-lisp
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (setq use-package-always-ensure t)

  (eval-when-compile
    (require 'use-package))

  (use-package which-key
    :config
    (which-key-mode))

  (use-package magit)

  (use-package markdown-mode
    :mode (("README\\.md\\'" . markdown-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)))

  (use-package re-builder
    :config
    (setq reb-re-syntax 'string)
    :bind (("C-c R" . re-builder)))

  (use-package pdf-tools
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page))
#+END_SRC

* Personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Hristo Filaretov"
        user-mail-address "h.filaretov@protonmail.com")
#+END_SRC

* UI preferences

** Font preferences

#+BEGIN_SRC emacs-lisp
  (setq hgf/default-font "Fira Mono")
  (setq hgf/default-font-size 11)

  (defun hgf/default-font-code ()
    "Return a string representing the default font (like \"Fira Mono-11\")."
    (concat hgf/default-font "-" (number-to-string hgf/default-font-size)))

  (defun hgf/set-font ()
    "Set the font settings for the current frame, and also make it the default
  for other, future frames."
    (let ((font-code (hgf/default-font-code)))
      (add-to-list 'default-frame-alist (cons 'font font-code))
      (set-frame-font font-code)))

  (hgf/set-font)
#+END_SRC

** Color themes

Keep all text the same size, I find it distracting otherwise. Also, let me
easily switch between the solarized variants.

#+BEGIN_SRC emacs-lisp
  (setq solarized-high-contrast-mode-line t
        x-underline-at-descent-line t
        solarized-use-variable-pitch nil
        solarized-height-plus-1 1.0
        solarized-height-plus-2 1.0
        solarized-height-plus-3 1.0
        solarized-height-plus-4 1.0)
  (load-theme 'solarized-dark t)

  (defun hgf/toggle-theme ()
    "Toggle between solarized variants."
    (interactive)
    (if (equal (car custom-enabled-themes) 'solarized-dark)
        (load-theme 'solarized-light)
      (load-theme 'solarized-dark)))

  (global-set-key (kbd "C-c t") 'hgf/toggle-theme)
#+END_SRC

** Highlight current line

Highlighting the current line is quite helpful, especially when switching
windows quickly and when working on code with others.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC

* =ido=, you do

#+BEGIN_SRC emacs-lisp
  (ido-mode 1)
  (setq ido-enable-flex-matching t
        ido-everywhere t)

  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message t)

  (setq eshell-visual-commands '(top))

  (setq enable-recursive-minibuffers t)

  ;;; Keybindings
  (global-set-key (kbd "M-o") 'other-window)

  (global-set-key (kbd "M-i") 'imenu)

  (global-set-key [remap dabbrev-expand] 'hippie-expand)

  ;;; Filetype hooks
  (add-hook 'tex-mode-hook
            #'(lambda ()
                ((setq ispell-parser 'tex)
                 (auto-fill-mode))))

  ;;; General hooks
  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

* Configure =evil-mode=
Editing in a Vim-like manner. I prefer using =evil-mode= only for editing text,
any other Emacs modes and operations should be done using the native Emacs
keybindings.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode 1))
#+END_SRC

* Configure =org-mode=

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            #'(lambda () (auto-fill-mode)))
  (setq org-adapt-indentation nil
        org-hide-leading-stars t
        org-startup-indented t)
#+END_SRC

** Code blocks

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t
        org-src-tab-acts-natively t)
#+END_SRC
