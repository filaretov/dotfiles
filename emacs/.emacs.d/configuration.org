#+title: Emacs Configuration
#+author: Hristo Filaretov

* Preamble
Most of this is based on Harry Schwartz's [[https://github.com/hrs/dotfiles/blob/master/emacs/.hgf-emacs-path/configuration.org][configuration]] and is also inspired by many his talks and blog posts.

I assume that =use-package= and =general= are always available and sprinkle their incantations
generously throughout the configuration.

I tried using =straight=, but I wound up having some trouble with =org-mode=, and altough I think it was documented somewhere, I'm more than happy with the regular =package=.

* Packaging
I use =use-package= for packaging my used packages.

#+begin_src emacs-lisp
(use-package use-package
  :config
  (global-set-key [remap dabbrev-expand] 'hippie-expand)
  (setq use-package-always-ensure t))
#+end_src

* Keybindings
I use =general= for my keybindings. It's generally quite good. The keybindings themselves will be
found throughout this file.

#+begin_src emacs-lisp
(use-package general)
#+end_src

* Compile

#+begin_src emacs-lisp
(use-package compile
  :ensure nil
  :config
  (general-def 'normal
    "C-x c" 'recompile))
#+end_src

* Files

#+begin_src emacs-lisp
(use-package files
  :ensure nil
  :config (general-def 'normal "C-s" 'save-buffer))
#+end_src

* Imenu

#+begin_src emacs-lisp
(use-package imenu
  :ensure nil
  :config
  (general-def 'normal
    "M-i" 'imenu))
#+end_src

* Flycheck

#+begin_src emacs-lisp
(use-package flycheck)
#+end_src

* Common paths
Building common paths.

#+begin_src emacs-lisp
(defun hgf-emacs-path (filename)
  "Return the file path of FILENAME relative to the Emacs directory."
  (format "%s%s" user-emacs-directory filename))

(defun hgf-journal-path (filename)
  "Return the file path of FILENAME relative to the Journal directory."
  (format "%s%s" "~/cloud/journal/" filename))
#+end_src

* Macros
I only have a single macro defined. And it probably exists in the standard library, or a commonly
used package. And yet here we are.

#+begin_src emacs-lisp
(defmacro ~> (init &rest lst)
  "Pipe INIT through LST.

Evaluate transformation pipeline LST. Either append argument at
the end or replace all :arg occurences (starting with INIT).

Example:
(pipe (number-sequence 1 10)
      (-filter 'evenp)
      (mapcar '1+))
=> (3 5 7 9 11)

(pipe (number-sequence 1 10)
    (-filter 'evenp)
    (mapcar '1+)
    (-filter (lambda (x) (= 0 (mod x 3))))
    (mapcar '1+)
    (-filter (lambda (x) (= 0 (mod x 5)))))
=> (10)

(pipe 1
      (1+)
      (1+)
      ((lambda (x y) (+ y x)) :arg 100))
=> 103"
  (reduce (lambda (acc el)
	    (if (member :arg el)
		(-replace :arg acc el)
	      (append el `(,acc))))
	  lst
	  :initial-value init))
#+end_src

* Add =resources= to =load-path=
#+begin_src emacs-lisp
(add-to-list 'load-path (hgf-emacs-path "resources"))
#+end_src

* Personal information
Just letting Emacs know who I am.

#+begin_src emacs-lisp
(setq user-full-name "Hristo Filaretov"
      user-mail-address "h.filaretov@campus.tu-berlin.de")
#+end_src

* Faces
Depending on the operating system, there are a few options.

#+begin_src emacs-lisp
(defun hgf--set-font ()
  "Set a font depending on the OS."
  (cond ((eq system-type 'windows-nt)
	 (set-face-attribute 'default nil
			     :family "Consolas"
			     :height 110))
	((eq system-type 'darwin)
	 (set-face-attribute 'default nil
			     :family "Source Code Pro"
			     :height 120
			     :weight 'semi-bold))
	(t ;; t for true operating system
	 (progn
	   (set-face-attribute 'default nil
			       :family "Iosevka Term"
			       :height 105)
	   (set-face-attribute 'fixed-pitch nil
			       :family "Iosevka Term"
			       :height 105)
	   (set-face-attribute 'variable-pitch nil
			       :family "Source Serif Pro"
			       :height 105)))))

(use-package faces
  :ensure nil
  :config
  (hgf--set-font))
#+end_src

* Face modifications
Some things aren't meant to be. Like variable sized fonts in my org files.

#+begin_src emacs-lisp
(defun hgf-org-mode-hook ()
  "Disable header variable font size."
  (progn
    (dolist (face '(org-level-1
		    org-level-2
		    org-level-3
		    org-level-4
		    org-level-5
		    org-document-title))
      (set-face-attribute face nil :weight 'normal :height 1.0)))
  (set-face-attribute 'org-block nil :foreground nil))

(add-hook 'org-mode-hook 'hgf-org-mode-hook)

(defun hgf-outline-mode-hook ()
  "Disable header variable font size."
  (progn
    (dolist (face '(outline-1
		    outline-2
		    outline-3
		    outline-4
		    outline-5
		    outline-6
		    outline-7
		    outline-8))
      (set-face-attribute face nil :weight 'semi-bold :height 1.0))))

#+end_src

* Modeline

#+begin_src emacs-lisp
(setq-default
 mode-line-format
 '(
   ""
   ;; Buffer name
   "%b"
   "  "
   ;; Modified cookie
   mode-line-modified
   "  "
   ;; Major mode
   "%m"
   "  "
   ;; VC Branch
   (:eval (when-let (vc vc-mode)
	    (propertize (substring vc 5)
			'face 'fixed-pitch)))
   pyvenv-mode-line-indicator))
#+end_src


* Evil
Vimmy keys and feel, for us vimfolk.

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
	evil-want-keybinding nil
	evil-want-abbrev-expand-on-insert-exit nil)
  :config
  (evil-mode 1)
  (setq evil-emacs-state-cursor 'bar
	evil-search-module 'evil-search
	evil-ex-search-case 'smart)
  (general-def 'normal
    "j" 'evil-next-visual-line
    "k" 'evil-previous-visual-line
    "L" 'evil-end-of-line
    "H" 'evil-first-non-blank-of-visual-line
    "?" 'swiper
    "C-u" 'evil-scroll-up
    "C-w 1" 'delete-other-windows
    "C-w x" 'kill-this-buffer)
  (general-def 'insert
    "C-e" 'end-of-line
    "C-a" 'beginning-of-line
    "C-k" 'kill-line
    "C-y" 'yank))
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
(use-package evil-magit)
(use-package evil-numbers)
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
(use-package evil-exchange
  :config
  (evil-exchange-cx-install))
(use-package evil-org
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
	    (lambda () (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

* LSP & Completion

#+begin_src emacs-lisp
(use-package company
  :config (global-company-mode +1))
#+end_src

#+begin_src emacs-lisp
(setq lsp-keymap-prefix "C-c l")
(use-package lsp-mode
  :hook ((lsp-mode . lsp-enable-which-key-integration))
  :commands lsp
  :config
  (setq gc-cons-threshold 200000000
	read-process-output-max (* 1024 1024 10)
	lsp-completion-provider :capf))

(use-package lsp-ui
  :commands lsp-ui-mode)

(use-package lsp-ivy
  :commands lsp-ivy-workspace-symbol)

#+end_src

* Wrangle some defaults
** Pot pourri
#+begin_src emacs-lisp
(global-auto-revert-mode 1)
(show-paren-mode 1)
(scroll-bar-mode 0)
(tool-bar-mode 0)
(menu-bar-mode 0)
(blink-cursor-mode 0)
(fringe-mode '(nil . 0))
(setq vc-follow-symlinks t
      sentence-end-double-space nil
      require-final-newline t
      confirm-kill-emacs 'y-or-n-p
      inhibit-startup-screen t
      inhibit-startup-message t
      initial-scratch-message nil
      initial-major-mode 'org-mode
      ring-bell-function 'ignore
      mode-line-default-help-echo nil
      show-paren-delay 0.0
      mouse-yank-at-point t
      default-input-method "TeX")
(fset 'yes-or-no-p 'y-or-n-p)
(add-hook 'after-save-hook
	  'executable-make-buffer-file-executable-if-script-p)

(setq-default fill-column 100
	      cursor-type 'bar)
#+end_src

** Backups
#+begin_src emacs-lisp
(setq backup-inhibited t
      auto-save-default nil
      make-backup-files nil)
#+end_src

** Scrolling
#+begin_src emacs-lisp
(setq scroll-margin 0
      scroll-step 1
      scroll-conservatively 10000
      scroll-preserve-screen-position 1)
#+end_src

* Interactive goodies
Great guy, that Harry Schwartz. Most of these functions are directly copied from his dotfiles.

** Open file as =sudo=

#+begin_src emacs-lisp
(defun hgf-find-file-as-sudo ()
  (interactive)
  (let ((file-name (buffer-file-name)))
    (when file-name
      (find-alternate-file (concat "/sudo::" file-name)))))
#+end_src

** Generate random scratch buffer

#+begin_src emacs-lisp
(defun hgf-generate-scratch-buffer ()
  "Create and switch to a temporary scratch buffer with a random
       name."
  (interactive)
  (switch-to-buffer (make-temp-name "scratch-")))
#+end_src

* Org
Org is amazing and I use it all the time. And once again, a large majority of this section is inspired by Harry Schwartz.

#+begin_src emacs-lisp
(use-package org)
#+end_src

** GTD
All about them tasks.

#+begin_src emacs-lisp
(defun org-capture-inbox ()
  (interactive)
  (condition-case nil
      (call-interactively 'org-store-link)
    (error nil))
  (org-capture nil "i"))
(general-add-advice 'org-capture-inbox :after '(lambda () (evil-append 0)))
(setq org-refile-use-outline-path 'file)
(setq org-clock-into-drawer nil)
(setq org-log-done 'time)
(setq org-refile-targets `((,(hgf-journal-path "projects.org") :maxlevel . 2)
			   (,(hgf-journal-path "someday.org") :level . 1)
			   (,(hgf-journal-path "tickler.org") :level . 1)
			   (,(hgf-journal-path "inbox.org") :level . 0)
			   (,(hgf-journal-path "fraunhofer.org") :maxlevel . 3)))
(setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "QUIT(q)")))
(setq org-agenda-files
      '(
	"~/cloud/journal/projects.org"
	"~/cloud/journal/inbox.org"
	"~/cloud/journal/notes.org"
	"~/cloud/journal/fraunhofer.org"
	))
(setq org-archive-location "~/cloud/journal/archive.org::* %s")
(setq org-capture-templates
      '(("n" "Note" entry (file "~/cloud/journal/notes.org")
	 "*  %?\n")
	("i" "Inbox" entry (file "~/cloud/journal/inbox.org")
	 "* TODO %?\n")))
(general-def
  "C-c c" 'org-capture
  "C-c a" 'org-agenda
  "C-c i" 'org-capture-inbox
  "C-c t" (lambda () (interactive) (org-capture nil "t")))
#+end_src

Alright, this function isn't exactly the cleanest possible thing in the world, but it's useful enough for me (for now).

#+begin_src emacs-lisp
(defun org-generate-report ()
  (interactive)
  (let ((header "|Task|Duration|"))
    (insert (s-join "\n" (nconc `(,header) (org-element-map (org-element-parse-buffer) 'clock
					     (lambda (clock)
					       (let ((task (org-element-property :title (org-element-property :parent (org-element-property :parent clock))))
						     (val  (org-element-property :duration clock)))
						 (format "| %s | %s |" (car task) val)))))))))
(general-def 'normal "C-c C-x C-r" 'org-generate-report)
#+end_src

#+begin_src emacs-lisp
(general-add-advice 'org-clock-in :after 'hgf-activate-current-task)
#+end_src


** Babel

#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
	     '("el" . "src emacs-lisp"))
(setq org-src-fontify-natively t
      org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0
      org-src-window-setup 'current-window)
#+end_src

Ledger entries too, please

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t)
   (emacs-lisp . t)
   (gnuplot . t)
   (haskell . nil)
   (latex . t)
   (ledger . t)
   (octave . t)
   (python . t)
   (ruby . t)))
#+end_src

** Cosmetics
I prefer my org-files non-indented. I also like to see the leading stars (otherwise there's a weird gap when things aren't indented.

#+begin_src emacs-lisp
(setq org-adapt-indentation nil
      org-hide-leading-stars nil
      org-cycle-separator-lines 0
      org-hide-emphasis-markers t
      org-fontify-done-headline nil)
#+end_src

** Editing
I often start new headings in the middle of editing a paragraph and I've never wanted to carry
over the text after the point.

#+begin_src emacs-lisp
(setq org-M-RET-may-split-line nil
      org-outline-path-complete-in-steps nil)
#+end_src

Quickly adding a link with the title from said link. Nifty.

#+begin_src emacs-lisp
(use-package org-cliplink
  :config
  (general-def
    "C-x C-l" 'org-cliplink))
#+end_src

** References and citations

#+begin_src emacs-lisp
(setq reftex-default-bibliography '("~/cloud/library.bib"))
(setq bibtex-completion-bibliography
      '("~/cloud/library.bib"))
#+end_src

** Ox and Latex
I use org to write many of my latex files, including longer documents.

#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
	       '("book"
		 "\\documentclass{book}\n[NO-DEFAULT-PACKAGES]\n[EXTRA]\n"
		 ("\\chapter{%s}" . "\\chapter*{%s}")
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
  (add-to-list 'org-latex-classes
	       '("ieee"
		 "\\documentclass{IEEEtran}\n[NO-DEFAULT-PACKAGES]\n[EXTRA]\n"
		 ("\\section{%s}" . "")
		 ("\\subsection{%s}" . "")
		 ("\\subsubsection{%s}" . "")))
  (add-to-list 'org-latex-classes
	       '("blank"
		 ""
		 ("\\section{%s}" . "")
		 ("\\subsection{%s}" . "")
		 ("\\subsubsection{%s}" . ""))))
(use-package ox-extra
  :ensure org-plus-contrib
  :commands ox-extras-activate
  :config
  (ox-extras-activate '(ignore-headlines)))
#+end_src

* Major modes
** Python
#+begin_src emacs-lisp
(use-package lsp-pyright
  :hook (python-mode . (lambda ()
			 (require 'lsp-pyright)
			 (lsp)))
  :config
  (setq flycheck-python-flake8-executable "flake8"))
(use-package blacken)
(use-package python-docstring)
(use-package pytest)
(use-package pyvenv
  :config
  (setenv "WORKON_HOME" "~/.cache/pypoetry/virtualenvs")
  (setq pyvenv-mode-line-indicator
	'(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] "))))
#+end_src

Emacs IPython Notebooks

#+begin_src emacs-lisp
(use-package ein)
#+end_src

** Markdown
I use markdown for all kinds of stuff, mostly readmes, but also a variety of documents in
conjunction with =pandoc=.

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode (("README\\.md\\'" . markdown-mode)
	 ("\\.md\\'" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode)))
#+end_src

** Ledger
Trackin' them finances.

#+begin_src emacs-lisp
(use-package ledger-mode
  :config
  (add-to-list 'ledger-reports '("diet" "%(binary) -f %(ledger-file) reg --value Assets --budget --daily"))
  (add-to-list 'ledger-reports '("work" "%(binary) -f %(ledger-file) bal --add-budget")))
#+end_src

** TeX
#+begin_src emacs-lisp
(use-package tex
:config
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq TeX-master nil)
(setq TeX-PDF-mode t))

(use-package auctex-latexmk
:config
(auctex-latexmk-setup)
(setq auctex-latexmk-inherit-TeX-PDF-mode t))

(defun hgf-bibtex-hook ()
"My bibtex hook."
(progn
(setq comment-start "%")))

(add-hook 'bibtex-mode-hook 'hgf-bibtex-hook)

(setq-default TeX-auto-save t
TeX-parse-self t
TeX-PDF-mode t
TeX-auto-local (hgf-emacs-path "auctex-auto"))
(setq bibtex-dialect 'biblatex)
#+end_src emacs-lisp

** Dired

#+begin_src emacs-lisp
(general-def 'normal "-" 'dired)
#+end_src

** Vterm
Vterm is the nicest terminal emulator for Emacs I've found so far. But it needs module support, which requires building emacs with =--with-modules=.

#+begin_src emacs-lisp
(use-package vterm
  :config
  (setq vterm-shell "/usr/bin/fish"
	vterm-kill-buffer-on-exit t
	vterm-copy-exclude-prompt t)
  (general-def 'normal
    "<f4>" 'vterm))
#+end_src

And some nice packages to go with that.

#+begin_src emacs-lisp
(use-package vterm-toggle
  :config
  (general-def "C-c t" 'vterm-toggle-cd))
#+end_src

** Elixir

#+begin_src emacs-lisp
(use-package elixir-mode)
(use-package alchemist)
#+end_src

** Lua

#+begin_src emacs-lisp
(use-package lua-mode)
#+end_src

** RISCV

#+begin_src emacs-lisp
(use-package riscv-mode)
#+end_src

** Rust
#+begin_src emacs-lisp
(use-package rust-mode
  :config
  (setq lsp-rust-server 'rust-analyzer))
#+end_src

* Minor modes
** Which key
For exploring new keys and remembering the lesser used ones.

#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+end_src

** Olivetti
Centering text when writing prose.

#+begin_src emacs-lisp
(use-package olivetti
  :config
  (setq-default olivetti-body-width 120)
  (add-hook 'org-mode-hook 'olivetti-mode))
#+end_src

** Outshine
#+begin_src emacs-lisp
(use-package outshine
  :config
  (setq outshine-startup-folded-p t)
  (add-hook 'conf-mode-hook #'outshine-mode 1)
  (add-hook 'prog-mode-hook #'outshine-mode 1)
  (add-hook 'bibtex-mode-hook #'outshine-mode 1)
  (add-hook 'LaTeX-mode-hook #'outshine-mode 1))
#+end_src

** Engine-mode
=hrs= strikes again.

#+begin_src emacs-lisp
(use-package engine-mode
  :config
  (engine-mode 1)
  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w"
    :docstring "Searchin' the wikis."))
#+end_src


* Magit
#+begin_src emacs-lisp
(use-package magit
  :config
  (general-def "C-c d" 'magit-list-repositories))
#+end_src

** Repolist
I like Magit's repolist feature, but I prefer to build the repolist dynamically.

#+begin_src emacs-lisp
(defun hgf-list-subdirs (dir)
  "List all subdirs, not recursive, absolute names, DIR shouldn't have a / at the end."
  (let ((base dir)
	(result))
    (dolist (f (directory-files base) result)
      (let ((name (concat base "/" f)))
	(when (and (file-directory-p name)
		   (not (equal f ".."))
		   (not (equal f ".")))
	  (add-to-list 'result name))))
    result))

(defun hgf-contains-git-repo-p (dir)
  "Check if there's  a .git directory in DIR."
  (let ((dirs (directory-files dir)))
    (member ".git" dirs)))


(defun hgf-filter-git-repos (dirs)
  "Remove all directories without a .git subdirectory in DIRS."
  (let ((result))
    (dolist (dir dirs result)
      (when (hgf-contains-git-repo-p dir)
	(add-to-list 'result dir)))
    result))

(defun hgf-make-magit-repolist (dirs)
  "Make a list of the form (dir 0) for the magit-list-repositories function from DIRS."
  (let ((result))
    (dolist (dir dirs result)
      (add-to-list 'result `(,dir 0)))
    result))

(defun hgf-repolist-refresh ()
  "Hi."
  (setq magit-repository-directories
	(~> "~/dev"
	    (hgf-list-subdirs)
	    (hgf-filter-git-repos)
	    (hgf-make-magit-repolist))))

(advice-add 'magit-list-repositories :before #'hgf-repolist-refresh)

(setq magit-repolist-columns
      '(("Name" 12 magit-repolist-column-ident nil)
	("Branch" 10 magit-repolist-column-branch nil)
	("Dirty" 6 magit-repolist-column-dirty nil)
	("B<U" 3 magit-repolist-column-unpulled-from-upstream
	 ((:right-align t)
	  (:help-echo "Upstream changes not in branch")))
	("B>U" 3 magit-repolist-column-unpushed-to-upstream
	 ((:right-align t)
	  (:help-echo "Local changes not in upstream")))
	("Version" 30 magit-repolist-column-version nil)
	("Path" 99 magit-repolist-column-path nil)))
#+end_src

* Neotree

#+begin_src emacs-lisp
(use-package neotree
  :config
  (general-def "<f2>" 'neotree-toggle)
  (setq neo-theme 'arrow))
#+end_src

* Ivy

#+begin_src emacs-lisp
(use-package ivy
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t
	enable-recursive-minibuffers t
	ivy-initial-inputs-alist nil
	count-format "(%d/%d) "))

(use-package counsel
  :config
  (counsel-mode 1)
  (use-package flx)
  (use-package smex))

(use-package ivy-rich
  :config
  (ivy-rich-mode 1))

#+end_src

** =ivy-bibtex=

#+begin_src emacs-lisp
(use-package ivy-bibtex
  :config
  (setq ivy-re-builders-alist
	'((ivy-bibtex . ivy--regex-ignore-order)
	  (t . ivy--regex-plus)))
  (setq ivy-bibtex-default-action 'ivy-bibtex-insert-citation)
  (setq bibtex-completion-cite-default-command "autocite"
	bibtex-completion-cite-prompt-for-optional-arguments nil
	bibtex-completion-pdf-field "file")
  (setq bibtex-completion-pdf-open-function
	(lambda (fpath)
	  (call-process "zathura" nil 0 nil fpath)))
  (general-def "C-x [" 'ivy-bibtex))
#+end_src

* Projectile

#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode +1)
  (general-def 'normal
    "M-p" 'projectile-command-map
    "C-p" 'projectile-find-file)
  (setq projectile-completion-system 'ivy)
  (setq projectile-project-search-path '("~/dev" "~/dev/fraunhofer")))
#+end_src

Some additional utilities I mostly use with Projectile:
#+begin_src emacs-lisp
(use-package ripgrep)
#+end_src

* Yasnippet

#+begin_src emacs-lisp
(use-package yasnippet)
(setq yas-snippet-dirs `(,(hgf-emacs-path "snippets"))
      yas-indent-line 'fixed)
(yas-global-mode 1)
#+end_src


* Helpful

#+begin_src emacs-lisp
(use-package helpful
  :config
  (general-def
    "C-h k" 'helpful-key
    "C-h F" 'helpful-function
    "C-h C" 'helpful-command
    "C-c C-d" 'helpful-at-point)
  (setq counsel-describe-function-function 'helpful-callable
	counsel-describe-variable-function 'helpful-variable))
#+end_src


* Hydra
I'm not really using Hydra properly, except for the window management stuff that I seldom need to
use.

#+begin_src emacs-lisp
(use-package hydra
  :config
  (defhydra hydra-shell (:exit t)
    "Execute shell command."
    ("m" (start-process "hydramake" nil "make") "make"))
  (defhydra hydra-window ()
    "Window management"
    ("o" other-window "other")
    ("h" windmove-left "left")
    ("j" windmove-down "down")
    ("k" windmove-up "up")
    ("l" windmove-right "right")
    ("s" split-window-below "sp-below")
    ("v" split-window-right "sp-right")
    ("d" delete-window "delete")
    ("f" find-file "file")
    ("b" ivy-switch-buffer "buffer")
    ("m" kill-this-buffer "murder")
    ("1" delete-other-windows "highlander")
    ("." nil "stop"))
  (defhydra hydra-files (:exit t)
    "Frequent files"
    ("e" (find-file (hgf-emacs-path "configuration.org")) "config")
    ("i" (find-file (hgf-journal-path "inbox.org")) "inbox")
    ("p" (counsel-find-file "~/cloud/journal/projects") "projects")
    ("f" (hydra-work/body) "fraunhofer")
    ("n" (find-file (hgf-journal-path "notes.org")) "notes")
    ("w" (find-file (hgf-journal-path "wiki.org")) "wiki")
    ("c" (hydra-configs/body) "configs")
    ("d" (find-file (hgf-journal-path "diet/diet.ledger")) "diet")
    ("D" (find-file (hgf-journal-path "diet/food.ledger")) "food")
    ("s" (hgf-generate-scratch-buffer) "scratch"))
  (defhydra hydra-configs (:exit t)
    "Configuration files"
    ("i" (find-file "~/.config/i3/config") "i3")
    ("g" (find-file "~/.config/git") "git")
    ("k" (find-file "~/.config/kitty/kitty.conf") "kitty")
    ("r" (find-file "~/.config/ranger/rc.conf") "ranger")
    ("R" (find-file "~/.config/rofi/config") "Rofi")
    ("e" (find-file (hgf-emacs-path "configuration.org")) "emacs")
    ("f" (find-file "~/.config/fish/config.fish") "fish"))
  (defhydra hydra-work (:exit t)
    "Configuration files"
    ("n" (find-file (hgf-journal-path "fraunhofer/notes.org")) "notes")
    ("t" (find-file (hgf-journal-path "fraunhofer/working_hours.ledger")) "working hours")
    ("p" (counsel-find-file (hgf-journal-path "fraunhofer/projects")) "projects"))
  (defhydra hydra-package (:exit t)
    "Package management"
    ("r" (package-refresh-contents) "refresh")
    ("i" (call-interactively #'package-install) "install")
    ("u" (package-utils-upgrade-all) "upgrade")
    ("d" (call-interactively #'package-delete) "delete"))
  (general-def
    "C-c s" 'hydra-shell/body
    "C-c P" 'hydra-package/body
    "C-c f" 'hydra-files/body
    "C-c w" 'hydra-window/body)
  (general-def 'normal
    "C-e" 'hydra-files/body))
#+end_src

* Custom file

#+begin_src emacs-lisp
(setq custom-file (hgf-emacs-path "custom.el"))
(load custom-file 'noerror)
#+end_src

* Theme
I am partial to Nord.

#+begin_src emacs-lisp
(use-package nord-theme)
#+end_src

For setting transparency. I don't really use it, but it's there if I want to.
#+begin_src emacs-lisp
(defun transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque."
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))
#+end_src

** Some goodies

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** Set theme

Add some custom themes to the mix and make sure =rainbow-mode= is available.

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path (hgf-emacs-path "themes/"))
(use-package rainbow-mode)
#+end_src

#+begin_src emacs-lisp
(defun hgf-disable-all-themes ()
  (dolist (theme custom-enabled-themes)
    (disable-theme theme)))

(defun hgf-load-theme (theme)
  "Disable all loaded themes and load THEME. Also sets certain face attributes I like to use."
  (interactive
   (list (intern (completing-read "Load custom theme: "
				  (mapcar 'symbol-name
					  (custom-available-themes))))))
  (unless (custom-theme-name-valid-p theme)
    (error "Invalid theme name `%s'" theme))
  (progn
    (hgf-disable-all-themes)
    (load-theme theme t)
    (set-face-attribute  'org-block-begin-line       nil  :underline nil :inherit  'fixed-pitch :background nil)
    (set-face-attribute  'org-block-end-line         nil  :overline  nil :inherit  'fixed-pitch :background nil)
    (set-face-attribute  'org-block                  nil  :inherit  'fixed-pitch :background nil :foreground nil)
    (set-face-attribute  'org-code                   nil  :inherit  'fixed-pitch)
    (set-face-attribute  'org-document-title         nil  :weight 'normal :height 1.0)
    (set-face-attribute  'org-document-info-keyword  nil  :inherit  'fixed-pitch)
    (set-face-attribute  'org-meta-line              nil  :inherit  'fixed-pitch :italic nil)
    (set-face-attribute  'org-verbatim               nil  :inherit  'fixed-pitch)
    (set-face-attribute  'org-tag                    nil  :inherit  'fixed-pitch :weight 'normal)
    (set-face-attribute  'org-done                   nil  :weight 'normal :inherit 'fixed-pitch)
    (set-face-attribute  'org-todo                   nil  :weight 'normal :inherit 'fixed-pitch)
    (set-face-attribute  'org-level-1                nil  :weight 'normal :height 1.0)
    (set-face-attribute  'org-level-2                nil  :weight 'normal :height 1.0)
    (set-face-attribute  'org-level-3                nil  :weight 'normal :height 1.0)
    (set-face-attribute  'org-level-4                nil  :weight 'normal :height 1.0)
    (set-face-attribute  'org-level-5                nil  :weight 'normal :height 1.0)
    (set-face-attribute  'org-level-6                nil  :weight 'normal :height 1.0)
    (set-face-attribute  'org-level-7                nil  :weight 'normal :height 1.0)
    (set-face-attribute  'org-level-8                nil  :weight 'normal :height 1.0)
    (set-face-attribute  'font-lock-comment-face     nil  :inherit 'fixed-pitch)
    (set-face-attribute  'neo-file-link-face         nil  :height 100)
					;(set-face-attribute  'mode-line                  nil  :background nil :overline nil :underline t)
					;(set-face-attribute  'mode-line-inactive         nil  :background nil :overline nil :underline t)
    ))
(hgf-load-theme 'nord)
#+end_src

* Triage

#+begin_src emacs-lisp
(defun hgf-switch-to-previous-buffer ()
  "Switch to previously open buffer.
      Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

;; ** Delete file
(defun visiting-file-p ()
  "Check whether current buffer is visiting an existing file."
  (let ((filename (buffer-file-name)))
    (and filename (file-exists-p filename))))

(defun hgf-delete-this-file ()
  "Remove file connected to current buffer and kill buffer."
  (interactive)
  (let ((filename (buffer-file-name))
	(buffer (current-buffer))
	(name (buffer-name)))
    (if (not (visiting-file-p))
	(kill-buffer buffer)
      (when (yes-or-no-p "Delete this file? ")
	(delete-file filename)
	(kill-buffer buffer)
	(message "File %s successfully removed" filename)))))

;; ** Rename file
(defun hgf-rename-this-file ()
  "Rename current buffer and associated file."
  (interactive)
  (let ((name (buffer-name))
	(filename (buffer-file-name)))
    (if (not (visiting-file-p))
	(error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
	(if (get-buffer new-name)
	    (error "A buffer named '%s' already exists!" new-name)
	  (rename-file filename new-name 1)
	  (rename-buffer new-name)
	  (set-visited-file-name new-name)
	  (set-buffer-modified-p nil)
	  (message "File '%s' successfully renamed to '%s'"
		   name (file-name-nondirectory new-name)))))))

;; ** Get org title
(defun hgf-get-org-title ()
  "Get the raw string of the current buffer's #+TITLE property."
  (substring-no-properties
   (car (plist-get (org-export-get-environment) :title))))


;; ** Activate current task
(defun hgf-activate-current-task ()
  "Activate task under cursor."
  (interactive)
  (progn
    (message "hi")
    (let ((task (mapconcat 'identity (org-get-outline-path t) " → ")))
      (progn
	(message task)
	(write-region (concat
		       (hgf-get-org-title)
		       " → "
		       task) nil "~/.current_task")))))

(general-def "C-c h" 'hgf-activate-current-task)

(defun org-export-file-to-file (infile outfile backend)
  (write-region (org-export-string-as
		 (with-temp-buffer
		   (insert-file-contents infile)
		   (buffer-string))
		 backend)
		nil
		outfile))
(add-hook 'compilation-finish-functions
	  (lambda (buf str)
	    (if (null (string-match ".*exited abnormally.*" str))
		;;no errors, make the compilation window go away in a few seconds
		(progn
		  (run-at-time
		   "1 sec" nil 'kill-buffer
		   (get-buffer-create "*compilation*"))
		  (message "No Compilation Errors!")))))
#+end_src

* Meta modes
** Prog mode
I like =hl-line-mode= but only when programming. It's quite annoying when writing prose.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'hl-line-mode)
(add-hook 'prog-mode-hook 'outshine-mode)
#+end_src


