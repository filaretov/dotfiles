;; * Minor modes
;; ** Evil
(use-package evil
  :config
  (general-evil-define-key 'normal 'global
      "gb" 'hgf-switch-to-previous-buffer))

;; ** Hydra
(use-package hydra
  :config
  (defhydra hydra-window ()
    "Window management"
    ("o" other-window "other")
    ("h" windmove-left "left")
    ("j" windmove-down "down")
    ("k" windmove-up "up")
    ("l" windmove-right "right")
    ("s" split-window-below "sp-below")
    ("v" split-window-right "sp-right")
    ("d" delete-window "delete")
    ("f" find-file "file")
    ("b" ivy-switch-buffer "buffer")
    ("m" kill-this-buffer "murder")
    ("1" delete-other-windows "highlander")
    ("." nil "stop"))
  (defhydra hydra-freq-files (:exit t)
    "Frequent files"
    ("e" (find-file (emacs.d "init.el")) "conf")
    ("i" (find-file (journal.d "inbox.org")) "inbox")
    ("n" (find-file (journal.d "notes.org")) "notes")
    ("u" (find-file (journal.d "uniplan.org")) "uniplan")
    ("t" (find-file (journal.d "time.ledger")) "time")
    ("w" (find-file "~/.config/i3/config") "i3wm")
    ("p" (find-file "~/Development/crucible/tasks/packages.yml") "packages"))
  (defhydra hydra-package (:exit t)
    "Package management"
    ("r" (package-refresh-contents) "refresh")
    ("i" (call-interactively #'package-install) "install")
    ("u" (package-utils-upgrade-all) "upgrade")
    ("d" (call-interactively #'package-delete) "delete"))
  (defhydra hydra-project (:exit t)
    "Package management"
    ("c" (call-interactively #'compile) "compile"))
  (general-def
    "C-c w" 'hydra-window/body
    "C-c f" 'hydra-freq-files/body
    "C-c i" 'hydra-package/body
    "C-c p" 'hydra-project/body))

;; ** Magit
(use-package magit
  :config
  (general-def "C-c d" 'magit-list-repositories)
  (general-def magit-status-mode-map "q" #'hgf-magit-kill-buffers))

;; *** Repolist
(defun hgf-list-subdirs (dir)
  "List all subdirs, not recursive, absolute names, DIR shouldn't have a / at the end."
  (let ((base dir)
	(result))
    (dolist (f (directory-files base) result)
      (let ((name (concat base "/" f)))
	(when (and (file-directory-p name)
		   (not (equal f ".."))
		   (not (equal f ".")))
	  (add-to-list 'result name))))
    result))

(defun hgf-contains-git-repo-p (dir)
  "Check if there's  a .git directory in DIR."
  (let ((dirs (directory-files dir)))
    (member ".git" dirs)))

(defun hgf-filter-git-repos (dirs)
  "Remove all directories without a .git subdirectory in DIRS."
  (let ((result))
    (dolist (dir dirs result)
      (when (hgf-contains-git-repo-p dir)
	(add-to-list 'result dir)))
    result))

(defun hgf-make-magit-repolist (dirs)
  "Make a list of the form (dir 0) for the magit-list-repositories function."
  (let ((result))
    (dolist (dir dirs result)
      (add-to-list 'result `(,dir 0)))
    result))

(defun hgf-repolist-refresh ()
  (setq magit-repository-directories
	(hgf-make-magit-repolist
	 (hgf-filter-git-repos
	  (hgf-list-subdirs "~/dev")))))

(advice-add 'magit-list-repositories :before #'hgf-repolist-refresh)

(setq magit-repolist-columns
      '(("Name" 12 magit-repolist-column-ident nil)
	("Branch" 10 magit-repolist-column-branch nil)
	("Dirty" 6 magit-repolist-column-dirty nil)
	("B<U" 3 magit-repolist-column-unpulled-from-upstream
	 ((:right-align t)
	  (:help-echo "Upstream changes not in branch")))
	("B>U" 3 magit-repolist-column-unpushed-to-upstream
	 ((:right-align t)
	  (:help-echo "Local changes not in upstream")))
	("Version" 30 magit-repolist-column-version nil)
	("Path" 99 magit-repolist-column-path nil)))

